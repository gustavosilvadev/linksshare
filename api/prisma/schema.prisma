generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  @@map("user")
  id        String  @id @default(uuid()) @db.Uuid
  name      String
  lastName  String  @map("last_name")
  email     String
  userType  String  @map("user_type")
  userName  String  @map("user_name")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  userAccess UserAccess[]
  groupUser  GroupUser[]
  link  Link[]
}

model UserAccess {
  id        String   @id @default(uuid()) @db.Uuid
  password  String
  userAdmin Boolean  @map("user_admin")
  status    Boolean  @default(true)
  apiKey    String?  @default("") @map("api_key")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String   @unique @db.Uuid  @map("id_user") 

  user      User      @relation(fields: [userId], references: [id])
  @@map("user_access")
}

model GroupUser {

  id          String   @id @default(uuid()) @db.Uuid
  groupName   String   @map("group_name")
  statusGroup Boolean  @default(true) @map("status_group")
  imgIconGroup String  @map("img_icon_group")
  createdAt   DateTime @default(now()) @map("created_at")
  userId      String   @db.Uuid  @map("id_user") 

  user        User     @relation(fields: [userId], references: [id])
  @@map("group_user")
}

model Link {
  id              String   @id @default(uuid()) @db.Uuid
  name            String
  href            String
  hrefShortener   String?  @default("") @map("href_shortener")
  description     String
  viewStatus      Boolean  @map("view_status")
  positionLink    Int      @map("position_link")
  previewBeforeClick       String @map("preview_before_click")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  userId          String   @db.Uuid  @map("id_user") 

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  logClickLinkView  LogClickLinkView[]

  @@map("link")

}

model LogClickLinkView {
  id     String @id @default(uuid()) @db.Uuid
  linkId String @db.Uuid @map("link_id")

  link   Link   @relation(fields: [linkId], references: [id], onDelete: Cascade)
  @@map("log_click_link")

}

model LogPageView {
  id            String   @id @default(uuid()) @db.Uuid
  ipAddress     String   @map("ip_address")
  pageUrl       String   @map("page_url")
  accessedAt    DateTime @map("created_at")
  
  @@map("log_page_view")
}